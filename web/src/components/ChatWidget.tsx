"use client";
import { useEffect, useRef, useState } from "react";

type Message = { role: "user" | "assistant"; content: string };

// –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ API
const PRICE_INFO: Record<string, string> = {
  –ª–µ–Ω–¥–∏–Ω–≥: "–õ–µ–Ω–¥–∏–Ω–≥ (Start): –æ—Ç 49 500 ‚ÇΩ, —Å—Ä–æ–∫ 1-2 –Ω–µ–¥–µ–ª–∏. –í–∫–ª—é—á–µ–Ω–æ: –¥–∏–∑–∞–π–Ω, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
  crm: "CRM (Growth): –æ—Ç 145 000 ‚ÇΩ, —Å—Ä–æ–∫ 2-4 –Ω–µ–¥–µ–ª–∏. –í–∫–ª—é—á–µ–Ω–æ: –º–æ–¥—É–ª–∏ –ø—Ä–æ–¥–∞–∂, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°/–ë–∏—Ç—Ä–∏–∫—Å24, –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã, CI/CD.",
  erp: "ERP (Scale): –æ—Ç 345 000 ‚ÇΩ, —Å—Ä–æ–∫ 4-8 –Ω–µ–¥–µ–ª—å. –í–∫–ª—é—á–µ–Ω–æ: –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.",
  –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (Scale): –æ—Ç 345 000 ‚ÇΩ, —Å—Ä–æ–∫ 4-8 –Ω–µ–¥–µ–ª—å. –í–∫–ª—é—á–µ–Ω–æ: –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç—ã, –ø—Ä–æ—Ñ–∏–ª–∏, –∞–Ω—Ç–∏—Ñ—Ä–æ–¥.",
};

function getLocalResponse(query: string, lastMsg?: string): string | null {
  const lower = query.toLowerCase();
  if (lower.includes("—Ü–µ–Ω–∞") || lower.includes("—Å—Ç–æ–∏–º–æ—Å—Ç—å") || lower.includes("—Å–∫–æ–ª—å–∫–æ")) {
    for (const [key, info] of Object.entries(PRICE_INFO)) {
      if (lower.includes(key)) return info;
    }
    return "–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã: Start (–ª–µ–Ω–¥–∏–Ω–≥) ‚Äî –æ—Ç 49 500 ‚ÇΩ, Growth (CRM) ‚Äî –æ—Ç 145 000 ‚ÇΩ, Scale (ERP/–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å) ‚Äî –æ—Ç 345 000 ‚ÇΩ. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";
  }
  if (lower.includes("—Å—Ä–æ–∫") || lower.includes("–≤—Ä–µ–º—è") || lower.includes("—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏")) {
    return "–°—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ª–µ–Ω–¥–∏–Ω–≥ ‚Äî 1-2 –Ω–µ–¥–µ–ª–∏, CRM ‚Äî 2-4 –Ω–µ–¥–µ–ª–∏, ERP/–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å ‚Äî 4-8 –Ω–µ–¥–µ–ª—å. MVP –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ!";
  }
  if (lower.includes("—á—Ç–æ –º–æ–∂–µ—Ç–µ") || lower.includes("—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ") || lower.includes("—É—Å–ª—É–≥–∏")) {
    return "–°–æ–∑–¥–∞—ë–º: –ª–µ–Ω–¥–∏–Ω–≥–∏, CRM, ERP, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã, –±–ª–æ–≥–∏, BI-–∞–Ω–∞–ª–∏—Ç–∏–∫—É, LMS, SaaS. –° –ø–æ–º–æ—â—å—é –ò–ò –≤ 10√ó –¥–µ—à–µ–≤–ª–µ –∏ –≤ 7,5√ó –±—ã—Å—Ç—Ä–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.";
  }
  if (lower.includes("–ø—Ä–æ—Ü–µ—Å—Å") || lower.includes("–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ") || lower.includes("—ç—Ç–∞–ø—ã")) {
    return "–ü—Ä–æ—Ü–µ—Å—Å: 1) –ë—Ä–∏—Ñ –∏ –∞—É–¥–∏—Ç (24—á) ‚Üí 2) –ü—Ä–æ—Ç–æ—Ç–∏–ø –∏ —Å–º–µ—Ç–∞ (2-5 –¥–Ω–µ–π) ‚Üí 3) –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∏–Ω—Ç–∞–º–∏ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –¥–µ–º–æ ‚Üí 4) –ó–∞–ø—É—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Üí 5) –ü–æ–¥–¥–µ—Ä–∂–∫–∞.";
  }
  return null;
}

export default function ChatWidget() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content:
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Ü–µ–Ω—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å: –ª–µ–Ω–¥–∏–Ω–≥, CRM, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?",
    } as Message,
  ]);
  const [input, setInput] = useState("");
  const boxRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    boxRef.current?.scrollTo({ top: boxRef.current.scrollHeight, behavior: "smooth" });
  }, [messages]);

  async function send() {
    if (!input.trim()) return;
    const userMessage = input.trim();
    const next: Message[] = [
      ...messages,
      { role: "user", content: userMessage } as Message,
    ];
    setMessages(next);
    setInput("");

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const localReply = getLocalResponse(userMessage, messages[messages.length - 1]?.content);
    if (localReply) {
      setTimeout(() => {
        setMessages((m) => [
          ...m,
          { role: "assistant", content: localReply } as Message,
        ]);
      }, 300);
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º API
    try {
      const res = await fetch("/api/chat", { 
        method: "POST", 
        headers: { "Content-Type": "application/json" }, 
        body: JSON.stringify({ messages: next.slice(-6) }) 
      });
      const data: any = await res.json();
      setMessages((m) => [
        ...m,
        { role: "assistant", content: (data && data.reply) || "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: \"—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç CRM?\" –∏–ª–∏ \"—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–∞—Ä–∏—Ñ Start?\"" } as Message,
      ]);
    } catch (e) {
      setMessages(m => [...m, { role: "assistant", content: "–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ü–µ–Ω—ã –∏–ª–∏ —Ç–∞—Ä–∏—Ñ—ã, —è –æ—Ç–≤–µ—á—É –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã!" } as Message]);
    }
  }

  return (
    <div className="fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-2rem)]">
      <div className="w-full overflow-hidden rounded-2xl border border-slate-200/70 bg-white/90 backdrop-blur-md shadow-2xl">
        <div className="flex items-center justify-between border-b border-slate-200/70 bg-gradient-to-r from-purple-500 to-cyan-500 px-4 py-3">
          <div className="font-semibold text-white flex items-center gap-2">
            <span className="text-lg">ü§ñ</span>
            <span>–ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
          </div>
          <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
        </div>
        <div ref={boxRef} className="h-96 space-y-3 overflow-y-auto p-4 text-sm bg-gradient-to-b from-slate-50 to-white">
          {messages.map((m, i) => (
            <div key={i} className={m.role === "user" ? "flex justify-end" : "flex justify-start"}>
              <div className={`max-w-[85%] rounded-2xl px-4 py-2.5 ${m.role === "user" ? "bg-gradient-to-r from-purple-500 to-cyan-500 text-white" : "bg-white/80 backdrop-blur-sm border border-slate-200/70 text-slate-900 shadow-sm"}`}>
                {m.content}
              </div>
            </div>
          ))}
        </div>
        <div className="flex gap-2 border-t border-slate-200/70 bg-white/90 backdrop-blur-sm p-3">
          <input 
            value={input} 
            onChange={e => setInput(e.target.value)} 
            onKeyDown={e => e.key === 'Enter' && send()} 
            className="flex-1 rounded-xl border border-slate-300/70 bg-white/80 backdrop-blur-sm p-2.5 text-sm focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-200 transition-all" 
            placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ —Ü–µ–Ω—ã, —Ç–∞—Ä–∏—Ñ—ã, —Å—Ä–æ–∫–∏..." 
          />
          <button onClick={send} className="btn-brand rounded-xl px-4 py-2.5 text-sm font-medium whitespace-nowrap">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
      </div>
    </div>
  );
}
